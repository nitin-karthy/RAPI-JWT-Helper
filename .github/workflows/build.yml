name: Build and Release JWT Helper

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build Uber JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test

      - name: Get project version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Rename JAR with timestamp
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          JAR_NAME="jwt-helper-${{ steps.get_version.outputs.version }}-${TIMESTAMP}.jar"
          mv target/jwt.helper-${{ steps.get_version.outputs.version }}.jar target/${JAR_NAME}
          echo "JAR_NAME=${JAR_NAME}" >> $GITHUB_ENV

      - name: Upload Uber JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jwt-helper-uber-jar
          path: target/*.jar
          retention-days: 90

      - name: Generate build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Build Status:** Success" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ **Artifact:** jwt-helper-uber-jar" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”– **Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“… **Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### JAR Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh target/*.jar >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "All tests passed successfully! âœ…" >> $GITHUB_STEP_SUMMARY

      - name: Create Release (on master branch only)
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-${{ github.run_number }}
          name: JWT Helper v${{ steps.get_version.outputs.version }} Build ${{ github.run_number }}
          body: |
            ## JWT Helper Uber JAR
            
            This release contains the uber JAR with all dependencies included.
            
            ### Features
            - âœ… JWT token generation with RS256 algorithm
            - âœ… Support for encrypted and unencrypted P8 (PKCS#8) private keys
            - âœ… SHA-256 fingerprint generation for public keys
            - âœ… All dependencies bundled (ready to use in ReadyAPI)
            
            ### Usage
            Download the JAR and add it to your ReadyAPI project's ext directory.
            
            ```groovy
            // In your Groovy script
            def claims = [
                sub: "user123",
                role: "admin",
                exp: System.currentTimeMillis() / 1000 + 3600
            ]
            
            def jwt = com.smartbear.JWTHelper.make(
                claims,
                "/path/to/private_key.p8",
                "yourPassphrase"
            )
            
            // Generate fingerprint
            def fingerprint = com.smartbear.JWTHelper.generateFingerprint(
                "/path/to/public_key.p8"
            )
            ```
            
            ### Dependencies
            - JJWT v0.13.0
            - Bouncy Castle v1.78.1
            - Commons IO v2.20.0
            
            **Build Date:** $(date)
            **Commit:** ${{ github.sha }}
          files: target/*.jar
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

